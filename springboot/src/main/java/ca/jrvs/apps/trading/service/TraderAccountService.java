package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.domain.TraderAccountView;
import java.lang.reflect.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao,
      SecurityOrderDao securityOrderDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount. - validate user input (all
   * fields must be non empty) - create a trader - create an account - create, setup, and return a
   * new traderAccountView
   * <p>
   * Assumption: to simplify the logic, each trader has only one account where traderId ==
   * accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null.
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {
    for (Field f : trader.getClass().getFields()) {
      if (f.getName() == "id") {
        if (f != null) {
          throw new IllegalArgumentException("id is not null");
        }
      } else {
        if (f == null) {
          throw new IllegalArgumentException("Field is null" + f.getName());
        }
      }
    }
    //Saving the trader in the database
    this.traderDao.save(trader);
    // Creating and setting up Account
    Account account = new Account();
    account.setAmount(0.0);
    account.setTraderId(trader.getId());
    this.accountDao.save(account);

    return new TraderAccountView(trader, account);

  }

  /**
   * A trader can be deleted if it has no open position and 0 cash balance - validate traderID - get
   * trader account by traderId and check account balance - get positions by accountId and check
   * positions - delete all securityOrders, account, trader (in this order)
   *
   * @param traderId must not be null
   * @throws IllegalArgumentException if traderId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {
    if (traderId != null) {
      if (traderDao.existsById(traderId)) {
        Account account = accountDao.findByTraderId(traderId);
        if(account.getAmount()==0){
          positionDao.ObtainPositionInfo();
        }


      } else {
        throw new IllegalArgumentException("Not found traderId: "+ traderId);
      }
    } else {
      throw new IllegalArgumentException("traderId is null " + traderId);
    }

  }

  /**
   * Deposit a fund to an account by traderId - Validate user input - account =
   * accountDao.findByTraderId - accountDao.updateAmountById
   *
   * @param traderId must not be null
   * @param fund     must be greater than 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found, and fund is less or equal to
   *                                  0
   */
  public Account deposit(Integer traderId, Double fund) {

  }

  /**
   * Withdraw a fund to an account by traderId - Validate user input - account =
   * accountDao.findByTraderId - accountDao.updateAmountById
   *
   * @param traderId traderId
   * @param fund     amount can't be 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found, and fund is less or equal to
   *                                  0, and insufficient fund
   */
  public Account withdraw(Integer traderId, Double fund) {

  }

}
